from __future__ import print_function
import argparse
import torch
import torch.nn as nn
import torch.nn.functional as F

from variational_layers.linear_variational import LinearVariational

prior_mu = 0.0
prior_sigma = 1.0
posterior_mu_init = 0.0
posterior_rho_init = -3.0


class SCNN(nn.Module):
    def __init__(self):
        super(SCNN, self).__init__()
        self.fc1 = LinearVariational(prior_mu, prior_sigma, posterior_mu_init,
                                     posterior_rho_init, 28521, 300)
        self.fc2 = LinearVariational(prior_mu, prior_sigma, posterior_mu_init,
                                     posterior_rho_init, 300, 300)
        self.fc3 = LinearVariational(prior_mu, prior_sigma, posterior_mu_init,
                                     posterior_rho_init, 300, 300)
        self.fc4 = LinearVariational(prior_mu, prior_sigma, posterior_mu_init,
                                     posterior_rho_init, 300, 2)

    def forward(self, x):
        kl_sum = 0
        x, kl = self.fc1(x)
        kl_sum += kl
        x = F.relu(x)
        x, kl = self.fc2(x)
        kl_sum += kl
        x = F.relu(x)
        x, kl = self.fc3(x)
        kl_sum += kl
        x = F.relu(x)
        output, kl = self.fc4(x)
        kl_sum += kl
        return output, kl